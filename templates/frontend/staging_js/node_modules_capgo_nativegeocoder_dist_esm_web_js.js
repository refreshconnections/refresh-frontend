"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkfrontend"] = self["webpackChunkfrontend"] || []).push([["node_modules_capgo_nativegeocoder_dist_esm_web_js"],{

/***/ "./node_modules/@capgo/nativegeocoder/dist/esm/web.js":
/*!************************************************************!*\
  !*** ./node_modules/@capgo/nativegeocoder/dist/esm/web.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NativeGeocoderWeb: () => (/* binding */ NativeGeocoderWeb)\n/* harmony export */ });\n/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @capacitor/core */ \"./node_modules/@capacitor/core/dist/index.js\");\n\nconst findAC = (address_components, type) => {\n    return (address_components.find((component) => component.types.includes(type)) || {\n        long_name: \"\",\n        short_name: \"\",\n        types: [],\n    });\n};\nclass NativeGeocoderWeb extends _capacitor_core__WEBPACK_IMPORTED_MODULE_0__.WebPlugin {\n    async reverseGeocode(options) {\n        if (!options.apiKey) {\n            throw new Error(\"apiKey is required for web\");\n        }\n        const params = Object.assign(Object.assign({ latlng: `${options.latitude},${options.longitude}`, key: options.apiKey }, (options.defaultLocale && { language: options.defaultLocale })), { result_type: \"street_address\" });\n        return fetch(`https://maps.googleapis.com/maps/api/geocode/json?${new URLSearchParams(params).toString()}`)\n            .then((response) => response.json())\n            .then((data) => {\n            return {\n                addresses: data.results\n                    .map((result) => {\n                    // transform the response in Address[]\n                    // use the result from google geocoder and transform it in Address\n                    return {\n                        latitude: result.geometry.location.lat,\n                        longitude: result.geometry.location.lng,\n                        countryCode: findAC(result.address_components, \"country\")\n                            .short_name,\n                        countryName: findAC(result.address_components, \"country\")\n                            .long_name,\n                        postalCode: findAC(result.address_components, \"postal_code\")\n                            .long_name,\n                        administrativeArea: findAC(result.address_components, \"administrative_area_level_1\").long_name,\n                        subAdministrativeArea: findAC(result.address_components, \"administrative_area_level_2\").long_name,\n                        locality: findAC(result.address_components, \"locality\")\n                            .long_name,\n                        subLocality: findAC(result.address_components, \"sublocality\")\n                            .long_name,\n                        thoroughfare: findAC(result.address_components, \"route\")\n                            .long_name,\n                        subThoroughfare: findAC(result.address_components, \"street_number\").long_name,\n                        areasOfInterest: [],\n                    };\n                })\n                    .slice(0, options.maxResults || 1),\n            };\n        });\n    }\n    async forwardGeocode(options) {\n        if (!options.apiKey) {\n            throw new Error(\"apiKey is required for web\");\n        }\n        const params = Object.assign(Object.assign({ address: options.addressString, key: options.apiKey }, (options.defaultLocale && { language: options.defaultLocale })), { result_type: \"street_address\" });\n        return fetch(`https://maps.googleapis.com/maps/api/geocode/json?${new URLSearchParams(params).toString()}`)\n            .then((response) => response.json())\n            .then((data) => {\n            return {\n                addresses: data.results\n                    .map((result) => {\n                    // transform the response in Address[]\n                    // use the result from google geocoder and transform it in Address\n                    return {\n                        latitude: result.geometry.location.lat,\n                        longitude: result.geometry.location.lng,\n                        countryCode: findAC(result.address_components, \"country\")\n                            .short_name,\n                        countryName: findAC(result.address_components, \"country\")\n                            .long_name,\n                        postalCode: findAC(result.address_components, \"postal_code\")\n                            .long_name,\n                        administrativeArea: findAC(result.address_components, \"administrative_area_level_1\").long_name,\n                        subAdministrativeArea: findAC(result.address_components, \"administrative_area_level_2\").long_name,\n                        locality: findAC(result.address_components, \"locality\")\n                            .long_name,\n                        subLocality: findAC(result.address_components, \"sublocality\")\n                            .long_name,\n                        thoroughfare: findAC(result.address_components, \"route\")\n                            .long_name,\n                        subThoroughfare: findAC(result.address_components, \"street_number\").long_name,\n                        areasOfInterest: [],\n                    };\n                })\n                    .slice(0, options.maxResults || 1),\n            };\n        });\n    }\n}\n//# sourceMappingURL=web.js.map\n\n//# sourceURL=webpack://frontend/./node_modules/@capgo/nativegeocoder/dist/esm/web.js?");

/***/ })

}]);